/* Generated By:JJTree&JavaCC: Do not edit this line. VBParserTokenManager.java */
package cager.parser;
import java.io.*;

public class VBParserTokenManager implements VBParserConstants
{
    /**
    **  VB can have line numbers, e.g.
    **      10 Dim X as Integer
    **      20 X = 10
    */
    static String currentLineNumberLabel = "";

    /*
    **  Add any VB line number to each token on that line.
    */
    static void CommonTokenAction(Token t)
    {
        t.currentLineNumberLabel = currentLineNumberLabel;
    }
  /**
 * @uml.property  name="debugStream"
 */
public  java.io.PrintStream debugStream = System.out;
  /**
 * @param ds
 * @uml.property  name="debugStream"
 */
public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x2001000L) != 0L)
            return 46;
         if ((active1 & 0x380000L) != 0L)
         {
            jjmatchedKind = 117;
            return 11;
         }
         if ((active0 & 0x1b800000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 61;
         }
         if ((active2 & 0x100000L) != 0L)
            return 123;
         if ((active2 & 0x10L) != 0L)
            return 14;
         if ((active1 & 0x8000000000000000L) != 0L)
            return 51;
         if ((active0 & 0xfffffe07f8000000L) != 0L || (active1 & 0xffffc7ffffL) != 0L)
         {
            jjmatchedKind = 117;
            return 129;
         }
         if ((active2 & 0x8L) != 0L)
            return 20;
         return -1;
      case 1:
         if ((active0 & 0x3200010020000000L) != 0L || (active1 & 0x40000880L) != 0L)
            return 129;
         if ((active0 & 0xcdfffe87d8000000L) != 0L || (active1 & 0xffbfc7f77fL) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
            return 129;
         }
         if ((active0 & 0x3800000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
            return 60;
         }
         if ((active1 & 0x380000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
            return 5;
         }
         return -1;
      case 2:
         if ((active0 & 0x4448b08010000000L) != 0L || (active1 & 0x8010840059L) != 0L)
            return 129;
         if ((active0 & 0x89b74e3fc8000000L) != 0L || (active1 & 0x7faf73f726L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 129;
         }
         if ((active1 & 0x80000L) != 0L)
            return 130;
         return -1;
      case 3:
         if ((active0 & 0x8102460300000000L) != 0L || (active1 & 0x6ba8000126L) != 0L)
            return 129;
         if ((active0 & 0x8b5283cc8000000L) != 0L || (active1 & 0x140773f600L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return 129;
         }
         return -1;
      case 4:
         if ((active0 & 0x50004c0000000L) != 0L || (active1 & 0x1402100000L) != 0L)
            return 129;
         if ((active0 & 0x8b0283808000000L) != 0L || (active1 & 0x420563f600L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 4;
            return 129;
         }
         return -1;
      case 5:
         if ((active0 & 0x90080000000000L) != 0L || (active1 & 0x205620600L) != 0L)
            return 129;
         if ((active0 & 0x820202008000000L) != 0L || (active1 & 0x400001f000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return 129;
         }
         if ((active0 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x4000L) != 0L)
            return 129;
         if ((active0 & 0x820200008000000L) != 0L || (active1 & 0x400001b400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
            return 129;
         }
         if ((active0 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0xa400L) != 0L)
            return 129;
         if ((active0 & 0x800200008000000L) != 0L || (active1 & 0x4000011000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
            return 129;
         }
         if ((active0 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 129;
         if ((active0 & 0x800200000000000L) != 0L || (active1 & 0x4000001000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 8;
            return 129;
         }
         if ((active0 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x4000001000L) != 0L)
            return 129;
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
            return 129;
         }
         if ((active0 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x200000000000L) != 0L)
            return 129;
         if ((active0 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 2);
      case 33:
         return jjStopAtPos(0, 137);
      case 34:
         return jjStopAtPos(0, 22);
      case 35:
         return jjStartNfaWithStates_0(0, 131, 20);
      case 36:
         return jjStopAtPos(0, 133);
      case 37:
         return jjStopAtPos(0, 149);
      case 38:
         return jjStartNfaWithStates_0(0, 148, 123);
      case 39:
         return jjStopAtPos(0, 17);
      case 40:
         return jjStopAtPos(0, 123);
      case 41:
         return jjStopAtPos(0, 124);
      case 42:
         return jjStopAtPos(0, 146);
      case 43:
         return jjStopAtPos(0, 144);
      case 44:
         return jjStopAtPos(0, 130);
      case 45:
         return jjStopAtPos(0, 145);
      case 46:
         return jjStartNfaWithStates_0(0, 132, 14);
      case 47:
         return jjStopAtPos(0, 147);
      case 58:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 59:
         return jjStopAtPos(0, 129);
      case 60:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xa000L);
      case 61:
         return jjStopAtPos(0, 134);
      case 62:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 63:
         return jjStopAtPos(0, 139);
      case 91:
         return jjStartNfaWithStates_0(0, 127, 51);
      case 92:
         return jjStopAtPos(0, 150);
      case 93:
         return jjStopAtPos(0, 128);
      case 94:
         return jjStopAtPos(0, 151);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x38000000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1b800000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3c000000000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3e00000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x7L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf80L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc00000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7800000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 125);
      case 125:
         return jjStopAtPos(0, 126);
      case 126:
         return jjStopAtPos(0, 138);
      default :
         return jjMoveNfa_0(12, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 62:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020300000000L, active1, 0x1000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40003800000000L, active1, 0x800f80031L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 129);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1023000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000008000000000L, active1, 0x6000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800c0000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 129);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 71, 129);
         return jjMoveStringLiteralDfa2_0(active0, 0x700010000000L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 129);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 94, 129);
         return jjMoveStringLiteralDfa2_0(active0, 0x108000400000000L, active1, 0x800000004eL, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x700L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 129);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x8001e000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 129);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 129);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0x10060000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0x300000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x5000000L);
      case 66:
      case 98:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 129);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000000L, active1, 0x2L);
      case 68:
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 129);
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x200008000000L, active1, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x28002100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000000000000L, active1, 0x1000004000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100000000L, active1, 0x400000L);
      case 77:
      case 109:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 129);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 130);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000400000000L, active1, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x2018004L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x300000000L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 129);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0200000000L, active1, 0x200000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 129);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 129);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 129);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 129);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x6400000600L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x80000000L);
      case 86:
      case 118:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 87:
      case 119:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 129);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 129);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 129);
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 129);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 129);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10080040000000L, active1, 0x200400000L);
      case 72:
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 129);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400100600L);
      case 75:
      case 107:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 129);
         break;
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x800002000000000L, active1, 0x1000020000L);
      case 77:
      case 109:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 129);
         break;
      case 78:
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 129);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 129);
         break;
      case 80:
      case 112:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 129);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x8000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0x3000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000400000000L, active1, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 129);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4010000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L, active1, 0x200000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80002000000000L, active1, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 129);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000008000000L, active1, 0x400101a000L);
      case 70:
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 129);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x4020000L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 129);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 129);
         break;
      case 77:
      case 109:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x201000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000600L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 129);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 129);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 67:
      case 99:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 129);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 68:
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 129);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 129);
         break;
      case 69:
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 129);
         break;
      case 70:
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 129);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 129);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 129);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0xa000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x400L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 129);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 129);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x4000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200800000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x18000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 129);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x10000L);
      case 76:
      case 108:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 129);
         break;
      case 78:
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 129);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0x4000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      case 68:
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 129);
         break;
      case 70:
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 129);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 129);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 129);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(10, 35);
         break;
      case 89:
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 45, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(11, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x1c3a268f1c3a268fL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 129;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  else if ((0x100003200L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAddTwoStates(6, 10);
                  }
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAddStates(0, 7);
                  }
                  else if ((0x100003200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddTwoStates(0, 4);
                  }
                  else if (curChar == 38)
                     jjAddStates(8, 10);
                  else if (curChar == 58)
                     jjCheckNAdd(46);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  break;
               case 0:
                  if ((0x100003200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddTwoStates(0, 4);
                  break;
               case 1:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddTwoStates(0, 4);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100003200L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(6, 10);
                  break;
               case 7:
                  if (curChar != 10)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(6, 10);
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(11, 13);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0xa00000000L & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 19:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 47)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 47)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 26:
                  if (curChar == 32)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 58)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 58)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 32)
                     jjCheckNAddStates(21, 23);
                  break;
               case 34:
                  if (curChar == 35 && kind > 113)
                     kind = 113;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 58)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 58)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 32)
                     jjCheckNAddStates(24, 26);
                  break;
               case 45:
                  if (curChar == 58)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(46);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if ((0x7a00000000L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 53:
                  if ((0x7a00000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(0, 7);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(115);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if (curChar == 38 && kind > 105)
                     kind = 105;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(30, 32);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(119, 120);
                  break;
               case 120:
                  if (curChar != 46)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(33, 35);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(33, 35);
                  break;
               case 122:
                  if (curChar == 38)
                     jjAddStates(8, 10);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(128, 117);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 130:
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 123:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(128);
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(124);
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(38, 49);
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 129:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 3:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 9:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 18:
                  if (curChar == 64)
                     kind = 110;
                  break;
               case 33:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
               case 43:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 36:
               case 44:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 54:
                  if (curChar == 93)
                     kind = 117;
                  break;
               case 55:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(38, 49);
                  break;
               case 56:
                  if ((0x100000001000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 57:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 58:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 63:
               case 96:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 64:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x10000000100000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 69:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x8000000080L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 74:
               case 83:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 75:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x4000000040000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 79:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 80:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 88:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x800000008L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 97:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 102:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x40000000400L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 106:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 111:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 124:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(124);
                  break;
               case 125:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 127:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(128);
                  break;
               case 128:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(128, 117);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 130:
               case 48:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 129:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 51:
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 129 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 13);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_4(0x8000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0x8000L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_4(active0, 0x8000L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_4(active0, 0x8000L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_4(active0, 0x8000L);
      default :
         return 5;
   }
}
private final int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_4(active0, 0x8000L);
      default :
         return 6;
   }
}
private final int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         break;
      default :
         return 7;
   }
   return 7;
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 24);
      case 34:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_6(0x800000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 2);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 5);
      case 35:
         return jjMoveStringLiteralDfa1_2(0xf80L);
      default :
         return jjMoveNfa_2(6, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0x80L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0xe00L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(2, 8);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0xc00L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_2(active0, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0xc00L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_2(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_2(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0xa00L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(5);
                  }
                  else if ((0x100003200L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddTwoStates(0, 4);
                  }
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x100003200L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(0, 4);
                  break;
               case 1:
                  if (curChar != 10)
                     break;
                  kind = 3;
                  jjCheckNAddTwoStates(0, 4);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 8:
                  if (curChar == 58)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 3:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_5(5, 0);
   }
}
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 4);
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 4);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 10)
                     kind = 18;
                  break;
               case 4:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  jjCheckNAddTwoStates(0, 4);
                  break;
               case 1:
                  if (curChar == 95)
                     jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   115, 116, 117, 118, 119, 120, 15, 18, 123, 125, 127, 14, 15, 18, 21, 22, 
   37, 38, 25, 26, 34, 32, 35, 36, 42, 43, 44, 52, 53, 54, 118, 15, 
   18, 121, 15, 18, 6, 10, 61, 67, 72, 77, 82, 86, 90, 95, 100, 104, 
   109, 113, 16, 17, 7, 8, 2, 3, 
};
public static final String[] jjstrLiteralImages = {
null, null, "\12", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "END_OF_COMMENT", 
   "START_OF_LINE", 
   "DIRECTIVE_IGNORE", 
   "DIRECTIVE_SKIP", 
   "WITHIN_COMMENT", 
   "WITHIN_STRING", 
};
public static final int[] jjnewLexState = {
   -1, -1, 2, -1, -1, -1, 0, 3, 3, -1, 4, 4, 0, 2, -1, 3, -1, 5, -1, 1, -1, 5, 6, -1, 0, 
   0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffb000045L, 0xf83243ffffffffffL, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0x8203aL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x8203aL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x4f7df80L, 0x0L, 0x0L, 
};
/**
 * @uml.property  name="input_stream"
 * @uml.associationEnd  multiplicity="(1 1)"
 */
protected SimpleCharStream input_stream;
/**
 * @uml.property  name="jjrounds" multiplicity="(0 -1)" dimension="1"
 */
private final int[] jjrounds = new int[129];
/**
 * @uml.property  name="jjstateSet" multiplicity="(0 -1)" dimension="1"
 */
private final int[] jjstateSet = new int[258];
/**
 * @uml.property  name="image"
 */
StringBuffer image;
/**
 * @uml.property  name="jjimageLen"
 */
int jjimageLen;
/**
 * @uml.property  name="lengthOfMatch"
 */
int lengthOfMatch;
/**
 * @uml.property  name="curChar"
 */
protected char curChar;
public VBParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public VBParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 129; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

/**
 * @uml.property  name="curLexState"
 */
int curLexState = 0;
/**
 * @uml.property  name="defaultLexState"
 */
int defaultLexState = 0;
/**
 * @uml.property  name="jjnewStateCnt"
 */
int jjnewStateCnt;
/**
 * @uml.property  name="jjround"
 */
int jjround;
/**
 * @uml.property  name="jjmatchedPos"
 */
int jjmatchedPos;
/**
 * @uml.property  name="jjmatchedKind"
 */
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 152)
         {
            jjmatchedKind = 152;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 12;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 20)
         {
            jjmatchedKind = 20;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 26)
         {
            jjmatchedKind = 26;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
          currentLineNumberLabel = image.toString();
         break;
      case 19 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            // Exclude "\n"
            input_stream.backup(1);
            matchedToken.image = matchedToken.image.substring(0, matchedToken.image.length()-1);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[2]);
         else
            image.append(jjstrLiteralImages[2]);
                currentLineNumberLabel = null;
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            // Exclude the ":" from the label token.
            input_stream.backup(1);
            matchedToken.image = matchedToken.image.substring(0, matchedToken.image.length()-1);
         break;
      case 117 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            char ch = matchedToken.image.charAt(matchedToken.image.length() -1);
            if (ch == '!')
            {
                try
                {
                    // Peek at the next character.
                    char nextCh = input_stream.readChar();
                    input_stream.backup(1);

                    if (nextCh == '[' || nextCh == '_' || Character.isLetter(nextCh))
                    {
                        // The "!" was NOT part of the identifier. Rather it was a binary
                        // operator such as x = rs!colName.
                        // Put the "!" back on the input stream
                        input_stream.backup(1);
                        // And remove it from the token
                        matchedToken.image = matchedToken.image.substring(0, matchedToken.image.length()-1);
                    }
                }
                catch (IOException e)
                {
                    throw new Error(e.toString());
                }
            }
         break;
      default : 
         break;
   }
}
}
