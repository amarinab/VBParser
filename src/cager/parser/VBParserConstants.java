/* Generated By:JJTree&JavaCC: Do not edit this line. VBParserConstants.java */
package cager.parser;

public interface VBParserConstants {

  int EOF = 0;
  int SPACE = 1;
  int EOL = 2;
  int LEADING_SPACE = 3;
  int LINE_NUMBER = 4;
  int BLANK_LINE = 5;
  int STATEMENT_LABEL = 6;
  int COMP_CONST = 7;
  int COND_IF = 8;
  int COND_END_IF = 9;
  int COND_ELSE = 10;
  int COND_ELSEIF = 11;
  int REM_COMMENT = 21;
  int UNTERMINATED_STRING_LITERAL = 24;
  int STRING_LITERAL = 25;
  int ADDRESSOF = 27;
  int AND = 28;
  int AS = 29;
  int BYREF = 30;
  int BYVAL = 31;
  int CALL = 32;
  int CASE = 33;
  int CONST = 34;
  int DEBUG_PRINT = 35;
  int DEBUG_ASSERT = 36;
  int DECLARE = 37;
  int DEFMODE = 38;
  int DIM = 39;
  int DO = 40;
  int EACH = 41;
  int ELSE = 42;
  int ELSEIF = 43;
  int END = 44;
  int ENDPROPERTY = 45;
  int ENUM = 46;
  int EQV = 47;
  int EVENT = 48;
  int EXIT = 49;
  int FALSE = 50;
  int FOR = 51;
  int FRIEND = 52;
  int FUNCTION = 53;
  int GET = 54;
  int GLOBAL = 55;
  int GOTO = 56;
  int IF = 57;
  int IMP = 58;
  int IMPLEMENTS = 59;
  int IN = 60;
  int IS = 61;
  int LIB = 62;
  int LIKE = 63;
  int LET = 64;
  int LOCK = 65;
  int LOOP = 66;
  int MOD = 67;
  int NEW = 68;
  int NEXT = 69;
  int NOT = 70;
  int ON = 71;
  int OPEN = 72;
  int OPTION = 73;
  int OPTIONAL = 74;
  int OR = 75;
  int PARAMARRAY = 76;
  int PRESERVE = 77;
  int PRIVATE = 78;
  int PROPERTY = 79;
  int PROTECTED = 80;
  int PUBLIC = 81;
  int PUT = 82;
  int REM = 83;
  int REDIM = 84;
  int RESUME = 85;
  int SELECT = 86;
  int SET = 87;
  int SHARED = 88;
  int SHORT = 89;
  int STATIC = 90;
  int STEP = 91;
  int SUB = 92;
  int THEN = 93;
  int TO = 94;
  int TRUE = 95;
  int TYPE = 96;
  int TYPEOF = 97;
  int UNTIL = 98;
  int WEND = 99;
  int WHILE = 100;
  int WITH = 101;
  int WITHEVENTS = 102;
  int XOR = 103;
  int INTEGER_LITERAL = 104;
  int LONG_LITERAL = 105;
  int DECIMAL_LITERAL = 106;
  int HEX_LITERAL = 107;
  int HEX_DIGITS = 108;
  int OCTAL_LITERAL = 109;
  int FLOATING_POINT_LITERAL = 110;
  int FRACTION = 111;
  int EXPONENT = 112;
  int DATE_LITERAL = 113;
  int DATE_ONLY_LITERAL = 114;
  int TIME_ONLY_LITERAL = 115;
  int HEX_DISPLACEMENT = 116;
  int IDENTIFIER = 117;
  int PLAIN_IDENTIFIER = 118;
  int DELIMITED_IDENTIFIER = 119;
  int LETTER = 120;
  int DIGIT = 121;
  int IDENT_SUFFIX = 122;
  int LPAREN = 123;
  int RPAREN = 124;
  int LBRACE = 125;
  int RBRACE = 126;
  int LBRACKET = 127;
  int RBRACKET = 128;
  int SEMICOLON = 129;
  int COMMA = 130;
  int HASH = 131;
  int DOT = 132;
  int DOLLAR = 133;
  int ASSIGN = 134;
  int GT = 135;
  int LT = 136;
  int BANG = 137;
  int TILDE = 138;
  int HOOK = 139;
  int COLON = 140;
  int LE = 141;
  int GE = 142;
  int NE = 143;
  int PLUS = 144;
  int MINUS = 145;
  int STAR = 146;
  int SLASH = 147;
  int BIT_AND = 148;
  int PERCENT = 149;
  int BACKSLASH = 150;
  int EXPO = 151;
  int ANYTHING_ELSE = 152;

  int DEFAULT = 0;
  int END_OF_COMMENT = 1;
  int START_OF_LINE = 2;
  int DIRECTIVE_IGNORE = 3;
  int DIRECTIVE_SKIP = 4;
  int WITHIN_COMMENT = 5;
  int WITHIN_STRING = 6;

  String[] tokenImage = {
    "<EOF>",
    "<SPACE>",
    "\"\\n\"",
    "<LEADING_SPACE>",
    "<LINE_NUMBER>",
    "\"\\n\"",
    "<STATEMENT_LABEL>",
    "\"#Const\"",
    "\"#If\"",
    "\"#End If\"",
    "\"#Else\"",
    "\"#ElseIf\"",
    "\"\"",
    "\"\\n\"",
    "<token of kind 14>",
    "\"#End If\"",
    "<token of kind 16>",
    "\"\\\'\"",
    "<token of kind 18>",
    "\"\\n\"",
    "<token of kind 20>",
    "<REM_COMMENT>",
    "\"\\\"\"",
    "\"\\\"\\\"\"",
    "\"\\n\"",
    "\"\\\"\"",
    "<token of kind 26>",
    "\"AddressOf\"",
    "\"And\"",
    "\"As\"",
    "\"ByRef\"",
    "\"ByVal\"",
    "\"Call\"",
    "\"Case\"",
    "\"Const\"",
    "\"Debug.Print\"",
    "\"Debug.Assert\"",
    "\"Declare\"",
    "<DEFMODE>",
    "\"Dim\"",
    "\"Do\"",
    "\"Each\"",
    "\"else\"",
    "\"ElseIf\"",
    "\"End\"",
    "\"EndProperty\"",
    "\"Enum\"",
    "\"Eqv\"",
    "\"Event\"",
    "\"Exit\"",
    "\"false\"",
    "\"for\"",
    "\"Friend\"",
    "\"Function\"",
    "\"Get\"",
    "\"Global\"",
    "\"Goto\"",
    "\"If\"",
    "\"Imp\"",
    "\"implements\"",
    "\"In\"",
    "\"Is\"",
    "\"Lib\"",
    "\"Like\"",
    "\"Let\"",
    "\"Lock\"",
    "\"Loop\"",
    "\"Mod\"",
    "\"New\"",
    "\"Next\"",
    "\"Not\"",
    "\"On\"",
    "\"Open\"",
    "\"Option\"",
    "\"Optional\"",
    "\"Or\"",
    "\"ParamArray\"",
    "\"Preserve\"",
    "\"private\"",
    "\"Property\"",
    "\"Protected\"",
    "\"Public\"",
    "\"Put\"",
    "\"Rem\"",
    "\"ReDim\"",
    "\"Resume\"",
    "\"Select\"",
    "\"Set\"",
    "\"Shared\"",
    "\"short\"",
    "\"static\"",
    "\"Step\"",
    "\"Sub\"",
    "\"Then\"",
    "\"To\"",
    "\"true\"",
    "\"Type\"",
    "\"TypeOf\"",
    "\"Until\"",
    "\"Wend\"",
    "\"while\"",
    "\"With\"",
    "\"WithEvents\"",
    "\"Xor\"",
    "<INTEGER_LITERAL>",
    "<LONG_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<HEX_DIGITS>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<FRACTION>",
    "<EXPONENT>",
    "<DATE_LITERAL>",
    "<DATE_ONLY_LITERAL>",
    "<TIME_ONLY_LITERAL>",
    "<HEX_DISPLACEMENT>",
    "<IDENTIFIER>",
    "<PLAIN_IDENTIFIER>",
    "<DELIMITED_IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<IDENT_SUFFIX>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"#\"",
    "\".\"",
    "\"$\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"%\"",
    "\"\\\\\"",
    "\"^\"",
    "<ANYTHING_ELSE>",
    "\":=\"",
  };

}
