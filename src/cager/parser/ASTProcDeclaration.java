/*
 * Copyright 2005-2006 Paul Cager.
 * 
 * www.paulcager.org
 * 
 * This file is part of cager.parser.
 * 
 * cager.parser is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * cager.parser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with cager.parser; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
/* Generated By:JJTree: Do not edit this line. ASTProcDeclaration.java */

package cager.parser;

public class ASTProcDeclaration extends SimpleNode {
  public ASTProcDeclaration(int id) {
    super(id);
  }

  public ASTProcDeclaration(VBParser p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(VBParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }


	/**
	 * The type of the procedure: Sub, Function, Property
	 * @uml.property  name="procType"
	 */
	private int procType;
	/**
	 * @param procType
	 * @uml.property  name="procType"
	 */
	public void setProcType(int procType)
	{
		this.procType = procType;
	}
	/**
	 * @return
	 * @uml.property  name="procType"
	 */
	public int getProcType()
	{
		return procType;
	}

	// The name is the first "child"
	public String getName()
	{
		SimpleNode name = ((SimpleNode)jjtGetChild(0));
		return name.getName();
	}

	// The formal parameter list (if any) will be second
	public ASTFormalParamList getParams()
	{
		for (int i = 0; i < jjtGetNumChildren(); i++)
		{
			if (jjtGetChild(i) instanceof ASTFormalParamList)
				return (ASTFormalParamList)jjtGetChild(i);
		}

		return null;
	}

	// The function return type (if any) is next.
	public ASTTypeName getReturnType()
	{
		for (int i = 0; i < jjtGetNumChildren(); i++)
		{
			if (jjtGetChild(i) instanceof ASTTypeName)
				return (ASTTypeName)jjtGetChild(i);
		}

		return null;
	}

	// The Statements are always the last entry
	public ASTStatements getStatements()
	{
		return (ASTStatements)jjtGetChild(jjtGetNumChildren()-1);
	}
}
