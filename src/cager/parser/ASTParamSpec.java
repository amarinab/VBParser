/*
 * Copyright 2005-2006 Paul Cager.
 * 
 * www.paulcager.org
 * 
 * This file is part of cager.parser.
 * 
 * cager.parser is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * cager.parser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with cager.parser; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
/* Generated By:JJTree: Do not edit this line. ASTParamSpec.java */

package cager.parser;

public class ASTParamSpec extends SimpleNode {
  public ASTParamSpec(int id) {
    super(id);
  }

  public ASTParamSpec(VBParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(VBParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }


	/**
	 * @uml.property  name="optional"
	 */
	private boolean optional;
	/**
	 * @uml.property  name="byVal"
	 */
	private boolean byVal;
	/**
	 * @uml.property  name="byRef"
	 */
	private boolean byRef;
	/**
	 * @uml.property  name="paramArray"
	 */
	private boolean paramArray;

	public boolean getOptional()
	{
		return optional;
	}

	public boolean getByVal()
	{
		return byVal;
	}

	public boolean getbyRef()
	{
		return byRef;
	}

	public boolean getParamArray()
	{
		return paramArray;
	}

	/**
	 * @param value
	 * @uml.property  name="optional"
	 */
	void setOptional(boolean value)
	{
		optional = value;
	}

	/**
	 * @param value
	 * @uml.property  name="byVal"
	 */
	void setByVal(boolean value)
	{
		byVal = value;
	}

	/**
	 * @param value
	 * @uml.property  name="byRef"
	 */
	void setByRef(boolean value)
	{
		byRef = value;
	}

	/**
	 * @param value
	 * @uml.property  name="paramArray"
	 */
	void setParamArray(boolean value)
	{
		paramArray = value;
	}


  public String toString()
  {
	  StringBuffer buff = new StringBuffer();

	  if (begin != null)
	  {
		buff.append(Integer.toString(begin.beginLine));
		buff.append(" ");
	  }

	  buff.append(VBParserTreeConstants.jjtNodeName[id]);

	  buff.append("( ");
	  if (optional) buff.append("Optional ");
	  if (byVal) buff.append("ByVal ");
	  if (byRef) buff.append("ByRef ");
	  if (paramArray) buff.append("ParamArray ");
	  buff.append(")");

	  buff.append(":  ");
	  if (begin != null)
	  {
	  	buff.append(begin.image);
	  	if (begin.next != null && begin != end) buff.append("...");
      }

	  return buff.toString();
  }


}
